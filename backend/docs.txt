********************************************
1- New App
********************************************
>> nest new backend 
>> npm run start:dev

********************************************
2- Configurations
********************************************
>> Create config folder 
>> create app.config and database.config, and add files for other services as u go 
>> npm i --save @nestjs/config

------------------------
>> in the main app.module 

imports:[ConfigModule.forRoot({
      isGlobal: true, // to prevent importing it in any module we need it 
      load: [databaseConfig, appConfig],
      envFilePath: '.env',
      ignoreEnvFile: false, // if u wanna ignore it 
      cache: true, // to speed up the process 
    }),
    ...
]
------------------------
# custom configuration , with Custom validate (class-transformer) and namespaces ( registerAs )

1- create dynamic validation function 
common/utils/validate-config.ts 

2- create app,database configuration

------------------------
# to use port in main.ts 

const configService = app.get(ConfigService)
configService.get('app.port')


********************************************
3- base controller and services
********************************************
>> nest g resource auth 
>> nest g resource modules/profiles 
>> nest g resource modules/posts


********************************************
4- convert ERD to database entites 
********************************************


********************************************
5- database
********************************************
>> docker.compose 
>> nest g module database
>> create abstract.entity.ts
------------------
import { Entity, PrimaryGeneratedColumn } from 'typeorm';

@Entity()
export class AbstractEntity<T> {
  @PrimaryGeneratedColumn()
  id: number;

  constructor(entity: Partial<T>) {
    Object.assign(this, entity); // is kinda like updating the object with external info, if it already exist
  }
}
------------------
>> npm install --save @nestjs/typeorm typeorm mysql2

********************************************
6- Route validation 
********************************************
>> U can add it locally per route like in Body(ValidationPipe)
or 
>> On Controller leve:  @UsePipes(ValidationPipe)
or 
>> On global level: app.useGlobalPipes(
  new ValidationPipe({
    whitelist:true
  })
)

********************************************
7- Serializing response (role based)
********************************************

# 1- create custom decorator to add 'dto' to metadata
to access it from interceptor and add more/less info to 
response accordingly 

# 2- in interceptor handle that seriliaztion process
or use general one provided by nest ClassSerializerInterceptor
similar to global ValidationPipe , 

all u have to do it just add custom settings in DTOs/entites 
like @Expose, @Exclude , @Transform 


********************************************
8- Auth
********************************************

For Authentication:

- first to inject service 

(1) add userService to exports 
(2) add userModule in auth module in imports 
(3) start impolemting signup in auth service 

# For hashing and encryption , we can use either crypto or bcrypt 

# 1- Authentication Service
npm i @nestjs/jwt
handle login, signup 

# 2- Passport Streategy
this is used to handle the validation method with by regular email/passowrd, 
google, ... 
and then it can handle the authentication using jwt, session, ... 



>> add the strategy to auth module providers and PassportModule to imports 
>>  AuthModule should import the JwtModule to handle JSON Web Token (JWT) generation and verification.


# Guards 
Guards have a single responsibility. They determine whether a given request will be handled 
by the route handler or not, depending on certain conditions (like permissions, roles, ACLs, etc.)



-------------------
Steps
-------------------
 npm install --save @nestjs/passport passport  passport-jwt
 npm install --save-dev @types/passport-jwt

 
1- create auth configuration 
2- add jwt module to auth module with configuration injected 
3- handle login/register in auth service 
4- passport-jwt vs passport-local 
local used for session auth , and jwt for jwt-auth 

lets focus on jwt one 
strategy is mainly used for jwt verification 

JWT Authentication Process
----------------------
1- User Registration:
The user provides their details (e.g., email, password) to the registration endpoint.
The server hashes the password and stores the user details in the database.

2- User Login:
The user submits their credentials (email and password) to the login endpoint.
The server verifies the credentials against the stored data.
If valid, the server generates a JWT containing user information (typically user ID).

3- Issuing the JWT:
The JWT is sent back to the user.
The user stores the JWT (usually in local storage or cookies).

4- Authenticated Requests:
For each subsequent request, the user includes the JWT in the Authorization header (Authorization: Bearer <token>).
The server verifies the JWT on each request.
If the JWT is valid, the server processes the request and provides the necessary response.

* (passport-jwt) >> a strategy used for validting jwt in header (we can customize it)
* (Guard):
- The guard (or middleware) uses the strategy to protect routes.
- The guard checks the incoming requests and only allows access if the token is valid.


1- create auth module, serive with login/register functoinality
2- include required services, module (UserModule, JWTModule,PassportModule, YourCustomLocalStrategy )
2-* for JWTModule >> u gonna need to add authconfig and inject it to use its variables with registerAsync
3- create strategies in auth/strategies
- jwt.strategy.ts

(before creating guard u can manually come over a route and use it 

@UseGuards(AuthGuard('myjwt'))) // AuthGuard from nestjs/passport
4- create guards auth/guards 
- jwt.guard.ts, 
- social (google.guard.ts, apple.guard.ts)


* Summary
- Strategy: Handles the extraction and verification of JWTs.
- Guard: Applies the strategy to protect routes by ensuring only authenticated requests are processed.


# Enable authentication globally
providers: [
  {
    provide: APP_GUARD,
    useClass: JwtAuthGuard,
  },
],

# Public guard 



********************************************
API Keys
********************************************
1- add api_key to configuration 
2- create apikey guard 
3- 

********************************************
GraphQL
********************************************
generate schema 
>> ts-node generate-typings

{
  allusers { // this is called the root field of query 
    name // payload of query and also any other nested fields called payload 
  }
}